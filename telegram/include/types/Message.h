#pragma once
#include <string>
#include <memory>
#include <vector>
#include <nlohmann/json.hpp>
using json = nlohmann::json;


#include "User.h"
#include "Chat.h"
#include "Chat.h"
#include "User.h"
#include "Chat.h"
#include "Message.h"
#include "User.h"
#include "MessageEntity.h"
#include "Animation.h"
#include "Audio.h"
#include "Document.h"
#include "PhotoSize.h"
#include "Sticker.h"
#include "Video.h"
#include "VideoNote.h"
#include "Voice.h"
#include "MessageEntity.h"
#include "Contact.h"
#include "Dice.h"
#include "Game.h"
#include "Poll.h"
#include "Venue.h"
#include "Location.h"
#include "User.h"
#include "User.h"
#include "PhotoSize.h"
#include "MessageAutoDeleteTimerChanged.h"
#include "Message.h"
#include "Invoice.h"
#include "SuccessfulPayment.h"
#include "UserShared.h"
#include "ChatShared.h"
#include "WriteAccessAllowed.h"
#include "PassportData.h"
#include "ProximityAlertTriggered.h"
#include "ForumTopicCreated.h"
#include "ForumTopicEdited.h"
#include "ForumTopicClosed.h"
#include "ForumTopicReopened.h"
#include "GeneralForumTopicHidden.h"
#include "GeneralForumTopicUnhidden.h"
#include "VideoChatScheduled.h"
#include "VideoChatStarted.h"
#include "VideoChatEnded.h"
#include "VideoChatParticipantsInvited.h"
#include "WebAppData.h"
#include "InlineKeyboardMarkup.h"
//This object represents a message.
struct Message{
	int message_id;
	int message_thread_id;
	std::shared_ptr<User> from;
	std::shared_ptr<Chat> sender_chat;
	int date;
	std::shared_ptr<Chat> chat;
	std::shared_ptr<User> forward_from;
	std::shared_ptr<Chat> forward_from_chat;
	int forward_from_message_id;
	std::string forward_signature;
	std::string forward_sender_name;
	int forward_date;
	bool is_topic_message;
	bool is_automatic_forward;
	std::shared_ptr<Message> reply_to_message;
	std::shared_ptr<User> via_bot;
	int edit_date;
	bool has_protected_content;
	std::string media_group_id;
	std::string author_signature;
	std::string text;
	std::vector<std::shared_ptr<MessageEntity>> entities;
	std::shared_ptr<Animation> animation;
	std::shared_ptr<Audio> audio;
	std::shared_ptr<Document> document;
	std::vector<std::shared_ptr<PhotoSize>> photo;
	std::shared_ptr<Sticker> sticker;
	std::shared_ptr<Video> video;
	std::shared_ptr<VideoNote> video_note;
	std::shared_ptr<Voice> voice;
	std::string caption;
	std::vector<std::shared_ptr<MessageEntity>> caption_entities;
	bool has_media_spoiler;
	std::shared_ptr<Contact> contact;
	std::shared_ptr<Dice> dice;
	std::shared_ptr<Game> game;
	std::shared_ptr<Poll> poll;
	std::shared_ptr<Venue> venue;
	std::shared_ptr<Location> location;
	std::vector<std::shared_ptr<User>> new_chat_members;
	std::shared_ptr<User> left_chat_member;
	std::string new_chat_title;
	std::vector<std::shared_ptr<PhotoSize>> new_chat_photo;
	bool delete_chat_photo;
	bool group_chat_created;
	bool supergroup_chat_created;
	bool channel_chat_created;
	std::shared_ptr<MessageAutoDeleteTimerChanged> message_auto_delete_timer_changed;
	int migrate_to_chat_id;
	int migrate_from_chat_id;
	std::shared_ptr<Message> pinned_message;
	std::shared_ptr<Invoice> invoice;
	std::shared_ptr<SuccessfulPayment> successful_payment;
	std::shared_ptr<UserShared> user_shared;
	std::shared_ptr<ChatShared> chat_shared;
	std::string connected_website;
	std::shared_ptr<WriteAccessAllowed> write_access_allowed;
	std::shared_ptr<PassportData> passport_data;
	std::shared_ptr<ProximityAlertTriggered> proximity_alert_triggered;
	std::shared_ptr<ForumTopicCreated> forum_topic_created;
	std::shared_ptr<ForumTopicEdited> forum_topic_edited;
	std::shared_ptr<ForumTopicClosed> forum_topic_closed;
	std::shared_ptr<ForumTopicReopened> forum_topic_reopened;
	std::shared_ptr<GeneralForumTopicHidden> general_forum_topic_hidden;
	std::shared_ptr<GeneralForumTopicUnhidden> general_forum_topic_unhidden;
	std::shared_ptr<VideoChatScheduled> video_chat_scheduled;
	std::shared_ptr<VideoChatStarted> video_chat_started;
	std::shared_ptr<VideoChatEnded> video_chat_ended;
	std::shared_ptr<VideoChatParticipantsInvited> video_chat_participants_invited;
	std::shared_ptr<WebAppData> web_app_data;
	std::shared_ptr<InlineKeyboardMarkup> reply_markup;
};

